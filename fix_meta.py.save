KKKKKKKKort json
import os

# Pfade
input_dir = '/mnt/c/Users/49177/Desktop/Blender/Obj Data'
meta_path = '/home/pepperboy8/projects/3DAnatomy/data/meta.json'
output_meta_path = '/home/pepperboy8/projects/3DAnatomy/data/meta_corrected.json'

# Schlüsselwörter für Gruppen
muscle_keywords = ['muscle', 'brachii', 'dorsi', 'levator', 'extensor', 'flexor', 'abductor', 'adductor', 'scalenus', 'rhomboid', 'serratus', 'pectoralis', 'gluteus', 'vastus', 'tensor', 'semispinalis', 'interossei', 'intercostal', 'transversus', 'obliquus', 'rectus', 'trapezius', 'sternohyoid', 'omohyoid', 'sternocleidomastoid', 'longissimus', 'splenius', 'iliocostalis', 'subclavius', 'supinator', 'pronator', 'biceps', 'triceps', 'anconeus', 'puborectalis', 'coccygeus', 'piriformis', 'gemellus', 'popliteus', 'fibularis', 'tibialis', 'infraspinatus', 'supraspinatus', 'teres', 'pectineus', 'gracilis', 'semimembranosus', 'semitendinosus', 'psoas', 'iliacus', 'subscapularis', 'coracobrachialis', 'brachialis', 'deltoid', 'plantaris', 'gastrocnemius', 'sternothyroid', 'quadratus']
tendon_keywords = ['tendon', 'ligament', 'retinaculum']
bone_keywords = ['bone', 'phalanx', 'vertebra', 'rib', 'costal', 'metacarpal', 'metatarsal', 'calcaneus', 'talus', 'navicular', 'cuneiform', 'pisiform', 'trapezium', 'trapezoid', 'capitate', 'hamate', 'scaphoid', 'lunate', 'triquetral', 'radius', 'ulna', 'humerus', 'clavicle', 'scapula', 'femur', 'tibia', 'fibula', 'patella', 'sacrum', 'mandible', 'maxilla', 'zygomatic', 'nasal', 'lacrimal', 'palatine', 'sphenoid', 'ethmoid', 'occipital', 'parietal', 'temporal', 'hyoid', 'vomer']

# Lade meta.json
try:
    with open(meta_path, 'r', encoding='utf-8') as f:
        meta = json.load(f)
except Exception as e:
    print(f'Fehler beim Laden von meta.json: {e}')
    exit(1)

# Korrigiere bestehende Einträge
for entry in meta:
    label = entry['label'].lower()
    if any(keyword in label for keyword in muscle_keywords):
        entry['group'] = 'muscles'
    elif any(keyword in label for keyword in tendon_keywords):
        entry['group'] = 'tendons'
    elif any(keyword in label for keyword in bone_keywords):
        entry['group'] = 'bones'
    else:
        entry['group'] = 'other'
    # Korrigiere Dateipfad
    fj = entry['fj']
    for filename in os.listdir(input_dir):
        if filename.endswith('.obj') and filename.startswith(fj + '_'):
            group = entry['group']
            entry['filename'] = f'{group}/{filename.replace(".obj", ".glb")}'
            break

# Füge fehlende Dateien hinzu
existing_fj = {entry['fj'] for entry in meta}
new_entries = []
for filename in os.listdir(input_dir):
    if filename.endswith('.obj'):
        fj = filename.replace('.obj', '').split('_')[0]
        if fj not in existing_fj:
            label = filename.replace('.obj', '').split('_', 2)[-1]
            group = 'other'
            if any(keyword in label.lower() for keyword in muscle_keywords):
                group = 'muscles'
            elif any(keyword in label.lower() for keyword in tendon_keywords):
                group = 'tendons'
            elif any(keyword in label.lower() for keyword in bone_keywords):
                group = 'bones'
            new_entries.append({
                'filename': f'{group}/{filename.replace(".obj", ".glb")}',
                'label': label,
                'group': group,
                'fma': '',
                'fj': fj
            })

meta.extend(new_entries)
with open(output_meta_path, 'w', encoding='utf-8') as f:
    json.dump(meta, f, indent=4)
print(f'Korrigierte meta.json erstellt: {output_meta_path}')
