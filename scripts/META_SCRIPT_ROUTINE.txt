kurz & klar: **Ja â€” deine meta.json ist jetzt konsistent und bereit fÃ¼r die Web-App.** ðŸŽ¯
(â€žFix-Kandidaten: 0 / Auto-Fixes: 0â€œ, vollstÃ¤ndige `entry_uid`s, gÃ¼ltige `model.asset.url`s, Phrasen-Regel fÃ¼r Bandscheiben sitzt.)

Hier ist eine **Checkliste**, mit der du die Meta kÃ¼nftig stabil pflegst und die Skripte sicher einsetzt.

# 1) Was ist â€žfertigâ€œ (Baseline)

* `data/meta.json`:

  * 2234 EintrÃ¤ge, alle mit `entry_uid` und `model.asset.url`.
  * Gruppen korrigiert (u. a. Intervertebral Disks â†’ `cartilage`).
* Skripte:

  * Builder/Heuristik angepasst (Phrasenregel `intervertebral (disc|disk)` â†’ `cartilage` vorrangig vor `vertebra`).
* Reports:

  * `group_predictions.csv` erzeugt, **keine** offenen Kandidaten.

# 2) Release-/Tagesroutine (immer gleich)

1. **Validieren & sichern**

   * `python3 scripts/meta_add_uid_and_validate.py`
     (stellt `entry_uid` sicher, prÃ¼ft Pflichtfelder)
   * Git-Commit + Tag (z. B. `meta-baseline-YYYY-MM-DD`).

2. **Vor Deploy: Guardrail**

   * `python3 scripts/rebuild_group_predictions_from_meta.py`
   * `python3 scripts/build_fixes_from_report.py --in reports/group_predictions.csv`
   * Erwartung: **Fix-Kandidaten: 0**.
     Wenn >0 â†’ Abschnitt 4 â€žKorrekturschleifeâ€œ.

# 3) Neue Modelle hinzufÃ¼gen (kleiner Leitfaden)

* Pro Eintrag pflegen:

  * `id` (FMA), `labels.en`, `classification.group` (nur erlaubte Gruppen),
  * `model.variants.*` **und** `model.asset` (mit `path`, `file`, `url`),
  * `entry_uid` im Format `fmaID__Dateiname.glb`.
* Danach Abschnitt 2 (Guardrail) laufen lassen.
* **Lizenz/Attribution** prÃ¼fen: `meta.license`, `meta.sources`, `meta.attribution` gefÃ¼llt.

# 4) Korrekturschleife (wenn Kandidaten auftauchen)

A) **Automatisch (sichere FÃ¤lle)**

* Kandidaten erzeugen/sichten:

  * `reports/group_fix_candidates.csv` (alle VorschlÃ¤ge)
  * `reports/group_fix_auto.csv` (nur sichere Auto-Fixes)
* Anwenden:

  * `python3 scripts/apply_group_fixes.py --fixes reports/group_fix_auto.csv --write --null-subgroup`
* Neu prÃ¼fen:

  * `rebuild_group_predictions_from_meta.py` â†’ `build_fixes_from_report.py --in â€¦`
  * Ziel: wieder **0 Kandidaten**.

B) **Manuell (unsichere FÃ¤lle)**

* In Excel/VS Code prÃ¼fen â†’ `entry_uid,new_group` als CSV speichern
  (z. B. `reports/group_fix_manual_from_uids.csv`).
* Anwenden wie oben mit `--fixes â€¦`.
* Guardrail erneut laufen lassen (Ziel: 0).

# 5) Regeln pflegen (einmalig, nachhaltig)

* **Phrasenmap** erweitern, wenn Muster wiederkehren (z. B. â€žpulmonary valveâ€œ â†’ `heart`).
* **Reihenfolge** beachten: spezifische Regeln (Disks) **vor** generischen (vertebra/bone).
* Nach RegelÃ¤nderung **immer**: rebuild â†’ build\_fixes â†’ prÃ¼fen, bis 0.

# 6) Dateien & ihre Rollen (Mini-Spickzettel)

* `data/meta.json` â€” **Quelle der Wahrheit**.
* `reports/group_predictions.csv` â€” aktueller Heuristik-Scan.
* `reports/group_fix_candidates.csv` â€” alles VerdÃ¤chtige.
* `reports/group_fix_auto.csv` â€” sichere Auto-Ã„nderungen.
* `scripts/apply_group_fixes.py` â€” schreibt Ã„nderungen in `meta.json` (mit Backup).
* `scripts/rebuild_group_predictions_from_meta.py` â€” baut Predictions aus **Meta**.
* `scripts/build_fixes_from_report.py` â€” findet Kandidaten, erstellt Auto-Fixes & Confusion.

# 7) Troubleshooting (hÃ¤ufige Stolpersteine)

* **404 beim Laden** â†’ check `model.asset.url` (Pfad, GroÃŸ-/Kleinschreibung).
* **leeres Label im Info-Panel** â†’ `labels.en` fehlt; setze `labels.en` (und gern `labels.de`).
* **Duplikate** â†’ `meta_add_uid_and_validate.py` meldet doppelte `id`s â†’ prÃ¼fen/vereinheitlichen.
* **CSV wird â€žeine Spalteâ€œ** â†’ Trennzeichen: immer **UTF-8, Komma**; im Zweifel das Auto-Laden im Script nutzt Fallback auf `;`.

# 8) Abnahme-Kriterien (grÃ¼n = gut)

* `build_fixes_from_report.py` meldet: **Fix-Kandidaten 0 / Auto-Fixes 0**.
* `reports/group_confusion.csv` hat (nahezu) nur Werte auf der Diagonale.
* Stichproben: 10 zufÃ¤llige EintrÃ¤ge passen semantisch (Label â†” Gruppe â†” Pfad).

---

Wenn du magst, gehen wir jetzt zurÃ¼ck zur **App** und setzen die drei Baustellen um:

1. **Startzustand**: nur `bones` + `teeth` laden (sichtbar), Rest lazy.
2. **Picking**: Pick-Pool nur mit **sichtbaren** Meshes fÃ¼ttern (damit â€ždrunterâ€œ klickbar ist).
3. **Reset**: Szene + Visibility + Pick-Pool + Info-Panel sauber auf Initialzustand.

Sag einfach â€žgo Appâ€œ, dann fÃ¼hre ich dich Schritt-fÃ¼r-Schritt durch â€“ mit kleinen, gezielten Ã„nderungen an genau den Dateien, die du schon hast.
